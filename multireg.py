# -*- coding: utf-8 -*-
"""MultiReg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Karh_0wqsbdyKeQeaCb8M_ZiHdnOdGUo

# **Project Die Walk√ºre (Multivariable Regression) **

## Load Data
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from scipy.stats import pearsonr
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor

# %matplotlib inline
df = pd.read_csv('https://raw.githubusercontent.com/DialecticalJuche1912/renting-info.csv/main/renting-data.csv')
df

"""## Data Cleaning """

# Returning the row columns for this dataset
dir(df)
print(dir(df)[:15])

# dropping incomplete data 
complete_df = df.dropna(subset=['Type of unit', 'VALUE'])
# dropping unrelated columns 
complete_df_1 = complete_df[['REF_DATE', 'Type of unit', 'VALUE']]
# Replacing string row value under column Type of unit with integers 
replaced_df = complete_df_1.replace(['Bachelor units','One bedroom units',
                                     'Two bedroom units','Three bedroom units']
                                    , [1,1,2,3])
replaced_df
# rename unit column 
clean_df = replaced_df.rename(columns={"Type of unit":"Number of units"})
clean_df

"""### Variable sorting """

y0 = clean_df['VALUE']
y = y0[y0 != 0]
np.array(y)
z = clean_df['Number of units']
x = clean_df['REF_DATE']

x

# Actual rental price in dollars 
y

z

"""## Data Visualization"""

plt.figure(figsize=(10, 6))
plt.hist([np.array(y)], bins=50, ec='black', color='#2196f3')
plt.xlabel('Price in Canadian Dollars')
plt.ylabel('Number of Units')

plt.show()

z_array = np.array(z)

# Calculate the frequencies
values, counts = np.unique(z_array, return_counts=True)

# Create labels that include the frequencies
labels = [f'{value} (n={count})' for value, count in zip(values, counts)]

plt.figure(figsize=(10, 5))

# Create the pie chart
plt.pie(counts, labels=labels, colors=['#BDBDBD', '#757575', '#546E7A'], autopct='%1.1f%%')

plt.title('Average Number of Rooms')

plt.show()

"""## Descriptive Statistics """

print(x.min())
print(x.max())
print(x.median()) # most of the data is from the recent 10-20 years

print(y.min())
print(y.max())
print(y.mean())
print(y.median())

print(z.mean())
print(z.median())

"""## Correlation Testing"""

x.corr(y) # date in relation to value

z.corr(y) # room in relation to value

min_size = min(x.size, y.size)

# Trim x and y to the size of the smallest array
x_trim = x[:min_size]
y_trim = y[:min_size]
pearsonr(x_trim, y_trim)
plt.title(f'Year Vs. Rent (Correlation {round((x.corr(y)), 3)})', fontsize=14)
plt.xlabel('Year', fontsize=14)
plt.ylabel('Rental Price in CAD', fontsize=14)
plt.scatter(x=x_trim, y=y_trim, alpha=0.6, s=80, color='indigo')
plt.figure(figsize=(6,6))
plt.show()

sns.set()
sns.set_context('talk')
sns.set_style('whitegrid')
sns.jointplot(x=x_trim, y=y_trim, color='orange', joint_kws={'alpha': 0.5})
plt.show()

sns.set()
sns.set_context('talk')
sns.set_style('whitegrid')
sns.jointplot(x=x_trim, y=y_trim, kind='hex', color='blue')
plt.show()

"""## Data Splitting

"""

from sklearn.model_selection import train_test_split 

x_train, x_test, y_train, y_test = train_test_split(x_trim, y_trim, test_size = 0.25, 
                                                    random_state=100)

print(x_train)

print(x_test)

print(y_train)

print(y_test)

# % of training set 
len(x_train) / len(x_trim)

# % of testing set 
x_test.shape[0] / y_trim.shape[0]

"""### Multivariable Regression"""

print("Length of y_train:", len(y_train))
print("Shape of y_train:", y_train.shape)

# If y_train is a Series, convert it to a DataFrame
if isinstance(y_train, pd.Series):
    y_train_df = y_train.to_frame()
    print("Shape of y_train DataFrame:", y_train_df.shape)

if isinstance(x_train, pd.Series):
    x_train = x_train.to_frame()

# We've already converted y_train to a DataFrame (y_train_df)
# So, we'll use y_train_df in the fit() method

# Define the model
multreg = LinearRegression()

# Fit the model
multreg.fit(x_train, y_train_df)
multreg.fit(x_test, y_test)

# If x_test is a Series, convert it to a DataFrame
if isinstance(x_test, pd.Series):
    x_test = x_test.to_frame()

# If y_test is a Series, convert it to a DataFrame
if isinstance(y_test, pd.Series):
    y_test = y_test.to_frame()

# Calculate the R-squared value
r_squared1 = multreg.score(x_train, y_train)
r_squared = multreg.score(x_test, y_test)

print('Testing set R-squared: ', r_squared)
print('Training set R-squared: ', r_squared1)

# Display the intercept and coefficient(s) of the model
print('Intercept:', multreg.intercept_[0])  # Index into the array to get the value

# Check if x_train is a DataFrame
if isinstance(x_train, pd.DataFrame):
    # If x_train is a DataFrame, create a DataFrame from the model coefficients 
    coef_df = pd.DataFrame(data=multreg.coef_[0], index=x_train.columns, columns=['coef'])
    print(coef_df)
else:
    # If x_train is not a DataFrame (i.e., it is a Series), print the model coefficient as a single value
    print('Coefficient:', multreg.coef_[0])

# The "Intercept" is the value of the output (Y) when all the input features (X's) are zero. 
      # This value is represented by the term "b" in the linear regression equation Y = b + m*X.
# The "Coefficient" is the multiplier for an input feature (X). It represents 
      # how much the output (Y) changes for a one-unit change in that feature, assuming all other features are held constant. 
      # This is represented by the term "m" in the equation above.

y.skew()

y_log = np.log(y)
y_log.tail()

print(y_log.skew())

sns.distplot(y_log)
plt.title(f'Log price with skew {y_log.skew()}')
plt.xlabel('Log Rental Price in CAD', fontsize=12)
plt.ylabel('Distribution', fontsize=12)
plt.show()

"""## Log Price model"""

log_r_squared_train = np.log(r_squared_train)
log_r_squared_test = np.log(r_squared_test)

print('Training set log R-squared: ', log_r_squared_train)
print('Testing set log R-squared: ', log_r_squared_test)

log_r_squared_train = np.log(y)
log_r_squared_test = np.log(r_squared_test)