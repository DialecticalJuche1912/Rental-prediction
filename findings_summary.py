# -*- coding: utf-8 -*-
"""Findings summary

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GEEIsgmHU2kdhatxTDs-VWkBUVmtihCQ
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

import pandas as pd 
import numpy as np 
df = pd.read_csv('https://raw.githubusercontent.com/DialecticalJuche1912/renting-info.csv/main/renting-data.csv')
df

# Returning the row columns for this dataset
dir(df)
print(dir(df)[:15])

# dropping incomplete data 
complete_df = df.dropna(subset=['Type of unit', 'VALUE'])
# dropping unrelated columns 
complete_df_1 = complete_df[['REF_DATE', 'Type of unit', 'VALUE']]
# Replacing string row value under column Type of unit with integers 
replaced_df = complete_df_1.replace(['Bachelor units','One bedroom units',
                                     'Two bedroom units','Three bedroom units']
                                    , [1,1,2,3])
replaced_df
# rename unit column 
clean_df = replaced_df.rename(columns={"Type of unit":"Number of units"})
clean_df

y = clean_df['VALUE']
np.array(y)

mean_y = y.mean()
print(mean_y)
median_y = y.median()
print(median_y)

def square_diff(y):
    mean = y.mean()
    return (y - mean) ** 2
print(square_diff(y))

y_variance = square_diff(y)
y_variance.mean()

std = np.sqrt(y_variance.mean())
print(std)

sample_size = print(len(y))

#  95% confidence range 

lower_bound = (mean_y - (1.96 * std / np.sqrt(64457)))
upper_bound = (mean_y + (1.96 * std / np.sqrt(64457)))

print('1 s.d. in log prices is', std)
print('2 s.d. in log prices is', 2*std)
print('The lower bound of 95% confidence interval in price is ', lower_bound)
print('The upper bound of 95% confidence interval in price is ', upper_bound)

"""95% confidence the value range is ___ from lower end (lower bound) to ___ from higher end (upper bound) 
1 and 2 standard deviations 

"""